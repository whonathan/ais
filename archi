#!/usr/bin/env bash

red() { printf '\033[31m%s\033[0m' "$1"; }
blue() { printf '\033[34m%s\033[0m' "$1"; }
green() { printf '\033[92m%s\033[0m' "$1"; }
yellow() { printf '\033[93m%s\033[0m' "$1"; }
newline() { printf '\n'; }

function getvar {
	local jokes=(
		"Maybe your passwords need a little couples therapy."
		"Even Darth Vader had better password hygiene than this."
		"Caps lock got you again? Maybe try lowercase this time."
		"Looks like your passwords are having an identity crisis."
		"Don't match, maybe they're looking for some extra spark?"
		"This might be the sign you need to upgrade your password game!"
		"My apologies, even your pet goldfish could guess this password!"
		"Looks like your love life isn't the only thing with match issues."
		"Your passwords are like a bad dream, wish they would just disappear."
		"Don't worry, I'm sure even a trained monkey could crack those passwords eventually."
	)
	while true; do
		read -rp "Enter $(red "hostname"): " hostname
		[ -z "$hostname" ] && continue
		while true; do
			read -rp "Enter $(blue "username"): " username
			[ -z "$username" ] && continue
			newline
			while true; do
				read -rsp "Enter $(red "root") password: " rootpass
				newline
				[ -z "$rootpass" ] && continue
				while true; do
					read -rsp "Re-enter $(red "root") password: " rootpass2
					newline
					[ -z "$rootpass2" ] && continue
					if [[ "$rootpass" = "$rootpass2" ]]; then
						newline
						while true; do
							read -rsp "Enter $(blue "$username") password: " userpass
							newline
							[ -z "$userpass" ] && continue
							while true; do
								read -rsp "Re-enter $(blue "$username") password: " userpass2
								newline
								[ -z "$userpass2" ] && continue
								if [[ "$userpass" = "$userpass2" ]]; then
									break 6
								else
									yellow "${jokes[RANDOM % ${#jokes[@]}]}"
									newline; break
								fi
							done
						done
					else
						yellow "${jokes[RANDOM % ${#jokes[@]}]}"
						newline; break
					fi
				done
			done
		done
	done
	clear
	while true; do
		printf "Select desired $(red "DISK") or $(red "PARTITION")"
		local options=("existing partition")
		options+=($(lsblk -dpnoNAME | grep -oP "/dev/vd[a-z]+|/dev/sd[a-z]+|/dev/nvme[0-9]n[0-9]+"))
		menu 1 "${options[@]}"
		DISK="${options[$?]}"

		if [[ "$DISK" != "existing partition" ]]; then
			while true; do
				read -rp "This will delete all partition tables on $(red "$DISK"). Continue? [Y/n] " yn
				newline
				case $yn in
				[Yy]|"") break 2 ;;
				[Nn]   ) continue 2 ;;
				esac
			done
		else
			clear
			while true; do
				options=($(lsblk -lpoNAME | grep -oP "/dev/vd[a-z][0-9]+|/dev/sd[a-z][0-9]+|/dev/nvme[0-9]n[0-9]p[0-9]+"))
				printf "Select $(red "ESP") partition"
				menu 1 "${options[@]}"
				ESP="${options[$?]}"
				printf "Select $(red "ROOT") partition"
				menu 1 "${options[@]}"
				ROOT="${options[$?]}"
				while true; do
					printf "ESP : $(red "$ESP")"
					newline
					printf "ROOT: $(red "$ROOT")"
					newline
					read -rp "Are you sure about these partitions? [Y/n] " yn
					newline
					case $yn in
					[Yy]|"") unset DISK; break 3 ;;
					[Nn]   ) unset ESP; unset ROOT; clear; continue 3 ;;
					esac
				done
			done
		fi
	done
}

function diskpart {
	local csv="btrfs su cr /mnt/"
	local msv="mount -o defaults,noatime,compress=zstd,autodefrag,subvol="

	if [[ -n "$ESP" && -n "$ROOT" ]]; then
		wipefs -af $ESP $ROOT
	elif [[ -n "$DISK" ]]; then
		wipefs -af "$DISK"
		sgdisk -Zo "$DISK"
		sgdisk --clear "$DISK" \
			--new=1:1M:+512M --typecode=1:ef00 --change-name=1:"ESP" \
			--new=2:0:0 --typecode=2:8300 --change-name=2:"ROOT"
		sleep 2
		ESP="/dev/disk/by-partlabel/ESP"
		ROOT="/dev/disk/by-partlabel/ROOT"
	fi

	mkfs.fat -F32 "$ESP"
	mkfs.btrfs -f "$ROOT"

	mount $ROOT /mnt
	"$csv"@
	"$csv"@log
	"$csv"@home
	"$csv"@cache
	"$csv"@machines
	"$csv"@portables
	"$csv"@snapshots
	umount /mnt
	"$msv"@				"$ROOT" /mnt
	"$msv"@log		 -m "$ROOT" /mnt/var/log
	"$msv"@home		 -m "$ROOT" /mnt/home
	"$msv"@cache	 -m "$ROOT" /mnt/var/cache
	"$msv"@machines	 -m "$ROOT" /mnt/var/lib/machines
	"$msv"@portables -m "$ROOT" /mnt/var/lib/portables
	"$msv"@snapshots -m "$ROOT" /mnt/.snapshots
	mount			 -m "$ESP"  /mnt/boot
}

function pacstrap {
	local cpu=$(lscpu | awk '/Vendor/ {print $3}' | head -n 1)
	local pkg="base base-devel linux-lts linux-firmware \
  efibootmgr inotify-tools grub-btrfs snapper zram-generator \
  networkmanager reflector openssh terminus-font"

	case "$cpu" in
	"AuthenticAMD") microcode="amd-ucode" ;;
	"GenuineIntel") microcode="intel-ucode" ;;
	esac
	[[ -n "$microcode" ]] && pkg+=" $microcode"

	yellow "Setting up mirrorlist..."
	reflector -c "$country" -l 5 --sort rate --save /etc/pacman.d/mirrorlist &>/dev/null
	sed -Ei 's/^#(Color)$/\1\nILoveCandy/;s/^#(ParallelDownloads).*/\1 = 10/' /etc/pacman.conf

	pacman -Syy archlinux-keyring --noconfirm
	pacstrap /mnt $pkg

	genfstab -U /mnt >>/mnt/etc/fstab
	printf -e "[zram0]\nzram-size = ram / 2" >/mnt/etc/systemd/zram-generator.conf
	cp -f /etc/pacman.conf /mnt/etc/pacman.conf
	cp -f /etc/pacman.d/mirrorlist /mnt/etc/pacman.d/mirrorlist
}

function chroot {
	printf "$hostname" >/etc/hostname
	useradd -mG root "$username"

	printf "root:$rootpass" | chpasswd
	printf "$username:$userpass" | chpasswd

	printf "$username ALL=(ALL:ALL) NOPASSWD: ALL" >/etc/sudoers.d/$username

	cat <<EOF >/etc/hosts
127.0.0.1 localhost
::1       localhost
127.0.1.1 ${hostname}.localdomain ${hostname}
EOF

	ln -sf "/usr/share/zoneinfo/$timezone" /etc/localtime && hwclock --systohc
	sed -i "/^#en_US.UTF-8/s/^#//" /etc/locale.gen && locale-gen

	printf "LANG=$locale" >/etc/locale.conf
	printf -e "KEYMAP=${keymap}\nFONT=ter-v22n" >/etc/vconsole.conf

	grub-install \
		--target=x86_64-efi \
		--efi-directory=/boot \
		--bootloader-id=GRUB
	grub-mkconfig -o /boot/grub/grub.cfg

	umount /.snapshots
	rm -rf /.snapshots
	snapper --no-dbus -c root create-config /
	btrfs subvolume delete /.snapshots
	mkdir /.snapshots
	mount -a
	chmod 750 /.snapshots
	sed -Ei 's/^(ALLOW_GROUPS=).*/\1"root"/;s/^(SYNC_ACL=).*/\1"yes"/' /etc/snapper/configs/root
	sed -Ei 's/^(TIMELINE_LIMIT_HOURLY=).*/\1"0"/'	/etc/snapper/configs/root
	sed -Ei 's/^(TIMELINE_LIMIT_DAILY=).*/\1"7"/'	/etc/snapper/configs/root
	sed -Ei 's/^(TIMELINE_LIMIT_WEEKLY=).*/\1"0"/'	/etc/snapper/configs/root
	sed -Ei 's/^(TIMELINE_LIMIT_MONTHLY=).*/\1"0"/' /etc/snapper/configs/root
	sed -Ei 's/^(TIMELINE_LIMIT_YEARLY=).*/\1"0"/'	/etc/snapper/configs/root

	services=(
		grub-btrfsd
		NetworkManager
		sshd
		snapper-timeline.timer
		snapper-cleanup.timer
		reflector.timer
		fstrim.timer
	)
	for srv in "${services[@]}"; do
		systemctl enable "$srv"
	done

	snapper --no-dbus -c root create -d "***FRESH_INSTALL***"
	grub-mkconfig -o /boot/grub/grub.cfg
}

if ! grep 'arch.*iso' /proc/cmdline; then
	red 'You are not running archiso.'
    newline
	exit 1
fi

. <(curl -s https://raw.githubusercontent.com/whonathan/dotfiles/main/scripts/bash/bashmenu)

country=$(curl -s http://ip-api.com/line?fields=country)
timezone=$(curl -s http://ip-api.com/line?fields=timezone)
locale="en_US.UTF-8"
keymap="us"

umount -R /mnt; setfont ter-v22b; clear

getvar && diskpart &>/dev/null && pacstrap
export hostname username rootpass userpass country timezone locale keymap
export -f chroot; arch-chroot /mnt bash -c 'chroot'